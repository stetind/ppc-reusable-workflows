name: 🚀 Auto Release Based on Conventional Commits

run-name: >-
  ${{ 
    format(
      '`{0}` Release ({1}{2})', 
      github.event.inputs.prerelease && github.event.inputs.prerelease != '' && github.event.inputs.prerelease != 'none' && 'Staging' || 'PRODUCTION', 
      github.event.inputs.tag || 'latest',
      github.event.inputs.prerelease && github.event.inputs.prerelease != '' && github.event.inputs.prerelease != 'none' && format(', Pre-release: {0}', github.event.inputs.prerelease) || ''
    ) 
  }}

on:
  workflow_call:
    inputs:
      tag:
        description: 'Optional tag version (e.g., v1.0.0). Leave empty for the latest tag.'
        required: false
        type: string
      prerelease:
        description: 'Optional prerelease identifier (e.g., beta, rc). Leave empty for stable.'
        required: false
        type: string
      force:
        description: 'Force proceed even if no commits found (default is false).'
        required: false
        type: boolean
        default: false
      branch:
        required: false
        type: string
        default: ${{ github.ref_name }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0

      - name: 🏷️ Get latest tag (if exists)
        id: get_tag
        uses: stetind/ppc-github-composite-actions/.github/actions/get-latest-tag@main

      - name: 🏷️ Use provided tag or latest tag
        id: select_tag
        run: |
          LATEST="${{ steps.get_tag.outputs.latest_tag }}"
          TAG_INPUT="${{ github.event.inputs.tag }}"

          if [[ -n "$TAG_INPUT" ]]; then
            echo "selected_tag=$TAG_INPUT" >> $GITHUB_OUTPUT
            echo "::notice ::Using provided tag: $TAG_INPUT"
          else
            echo "selected_tag=$LATEST" >> $GITHUB_OUTPUT
            echo "::notice ::Using latest tag: $LATEST"
          fi

      - name: 🧪 Generate changelog
        id: changelog
        if: steps.check_commits.outputs.proceed == 'true'
        uses: stetind/ppc-github-composite-actions/.github/actions/generate-changelog-by-tag@main
        with:
          previous_tag: ${{ steps.select_tag.outputs.selected_tag }}
          new_tag: ${{ steps.version.outputs.new_version }}
          repository: ${{ github.repository }}

      - name: 📤 Create GitHub Release
        if: steps.check_commits.outputs.proceed == 'true'
        uses: stetind/ppc-github-composite-actions/.github/actions/create-github-release@main
        with:
          version: ${{ steps.version.outputs.new_version }}
          changelog: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ inputs.prerelease != '' && inputs.prerelease != 'none' }}
          target_branch: ${{ inputs.branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📟 Final Summary
        if: steps.check_commits.outputs.proceed == 'true'
        run: |
          new_version="${{ steps.version.outputs.new_version }}"
          repo="${{ github.repository }}"
          release_url="https://github.com/${repo}/releases/tag/${new_version}"
          
          echo "::notice ::📆 Release Summary"
          echo "::notice ::🔖 Tag: $new_version"
          if [[ "${{ inputs.prerelease }}" != "" && "${{ inputs.prerelease }}" != "none" ]]; then
            echo "::notice ::🚧 Pre-release: ${{ inputs.prerelease }}"
          else
            echo "::notice ::✅ Production Release"
          fi
          echo "::notice ::🔗 URL: $release_url"
          echo "::notice ::🎉 Release successfully created!"
