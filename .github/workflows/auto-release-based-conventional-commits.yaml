name: 🚀 Auto Release Based on Conventional Commits

run-name: >-
  ${{ 
    format(
      '`{0}` Release ({1}{2})', 
      github.event.inputs.prerelease && github.event.inputs.prerelease != '' && github.event.inputs.prerelease != 'none' && 'Staging' || 'PRODUCTION', 
      github.event.inputs.tag || 'latest',
      github.event.inputs.prerelease && github.event.inputs.prerelease != '' && github.event.inputs.prerelease != 'none' && format(', Pre-release: {0}', github.event.inputs.prerelease) || ''
    ) 
  }}

on:
  workflow_call:
    inputs:
      tag:
        description: 'Optional tag version (e.g., v1.0.0). Leave empty for the latest tag.'
        required: false
        type: string
      prerelease:
        description: 'Optional prerelease identifier (e.g., beta, rc). Leave empty for stable.'
        required: false
        type: string
      force:
        description: 'Force proceed even if no commits found (default is false).'
        required: false
        type: boolean
        default: false
      branch:
        required: false
        type: string
        default: ${{ github.ref_name }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0

      - name: 🏷️ Get latest tag (if exists)
        id: get_tag
        run: |
          latest_tag=$(git tag --list | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
          echo "latest_tag=${latest_tag:-0.0.0}" >> $GITHUB_OUTPUT
          echo "::notice ::Latest tag found: $latest_tag"

      - name: 🏷️ Use provided tag or latest tag
        id: select_tag
        run: |
          if [[ -n "${{ inputs.tag }}" ]]; then
            echo "selected_tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
            echo "::notice ::Using provided tag: ${{ inputs.tag }}"
          else
            echo "selected_tag=${{ steps.get_tag.outputs.latest_tag }}" >> $GITHUB_OUTPUT
            echo "::notice ::Using latest tag: ${{ steps.get_tag.outputs.latest_tag }}"
          fi

      - name: 📦 Get commits since selected tag
        id: get_commits
        run: |
          if [[ "${{ steps.select_tag.outputs.selected_tag }}" != "0.0.0" ]]; then
            commits=$(git log "${{ steps.select_tag.outputs.selected_tag }}"..HEAD --pretty=format:"%s|%b")
          else
            commits=$(git log HEAD --pretty=format:"%s|%b")
          fi
          
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$commits" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "::notice ::Commits fetched: $commits"

      - name: 🚨 Check if commits found or force proceed
        id: check_commits
        run: |
          if [[ -z "${{ steps.get_commits.outputs.commits }}" ]]; then
            if [[ "${{ inputs.force }}" != "true" ]]; then
              echo "::warning ::No commits found, skipping release creation."
              echo "proceed=false" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "::notice ::Proceeding with release creation due to force flag."
              echo "proceed=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "::notice ::Commits found, proceeding with release."
            echo "proceed=true" >> $GITHUB_OUTPUT
          fi


      - name: 🔍 Detect version bump and compute new version
        id: version
        if: steps.check_commits.outputs.proceed == 'true'
        run: |
          current_version="${{ steps.select_tag.outputs.selected_tag }}"
          current_version="${current_version#v}"

          if [[ -z "$current_version" ]]; then
            current_version="0.0.0"
          fi

          IFS='.' read -r major minor patch <<< "$current_version"

          if [[ "$current_version" != "0.0.0" ]]; then
            commits=$(git log "v${current_version}"..HEAD --pretty=format:"%s%n%b")
          else
            commits=$(git log HEAD --pretty=format:"%s%n%b")
          fi

          bump_major=0
          bump_minor=0
          bump_patch=0

          while IFS= read -r line; do
            # Detect conventional commits with optional scope and optional breaking change (!)
            if [[ "$line" =~ ^(feat|fix|chore|refactor|perf|style|test|build|ci)(\([a-zA-Z0-9_-]+\))?!?: ]]; then
              type=$(echo "$line" | sed -E 's/^([a-z]+).*/\1/')
              if [[ "$line" =~ "!" ]]; then
                bump_major=1
              elif [[ "$type" == "feat" ]]; then
                bump_minor=1
              elif [[ "$type" == "fix" ]]; then
                bump_patch=1
              fi
            elif [[ "$line" =~ BREAKING[[:space:]]CHANGE ]]; then
              bump_major=1
            fi
          done <<< "$commits"

          if [[ "$bump_major" == 1 ]]; then
            new_version="$((major + 1)).0.0"
          elif [[ "$bump_minor" == 1 ]]; then
            new_version="$major.$((minor + 1)).0"
          elif [[ "$bump_patch" == 1 ]]; then
            new_version="$major.$minor.$((patch + 1))"
          else
            echo "::warning ::No version bump rule matched. Keeping current version: $current_version"
            new_version="$current_version"
          fi

          echo "::notice ::New version computed: v$new_version"
          echo "new_version=v$new_version" >> $GITHUB_OUTPUT
      

      - name: 🧪 Generate changelog
        id: changelog
        run: |
          declare -A sections
          sections=(
            [breaking]="### 💥 Breaking Changes"
            [feat]="### ✨ Features"
            [fix]="### 🐞 Fixes"
            [chore]="### 🔧 Chores"
            [docs]="### 📚 Documentation"
            [refactor]="### 🔄 Refactors"
            [test]="### ✅ Tests"
          )
          
          declare -A grouped
          
          while IFS='|' read -r subject body; do
            raw=${subject%%:*}
            scope=$(echo "$raw" | grep -oP '\(\K[^)]+' || echo general)
          
            if [[ "$subject" =~ !: ]] || [[ "$body" =~ BREAKING[[:space:]]CHANGE ]]; then
              grouped[breaking]+="- $subject\n"
            elif [[ "$subject" =~ ^feat: ]]; then
              grouped[feat]+="- $subject\n"
            elif [[ "$subject" =~ ^fix: ]]; then
              grouped[fix]+="- $subject\n"
            elif [[ "$subject" =~ ^chore: ]]; then
              grouped[chore]+="- $subject\n"
            elif [[ "$subject" =~ ^docs: ]]; then
              grouped[docs]+="- $subject\n"
            elif [[ "$subject" =~ ^refactor: ]]; then
              grouped[refactor]+="- $subject\n"
            elif [[ "$subject" =~ ^test: ]]; then
              grouped[test]+="- $subject\n"
            fi
          done <<< "${{ steps.get_commits.outputs.commits }}"
          
          changelog=""
          for key in "${!sections[@]}"; do
            if [[ -n "${grouped[$key]}" ]]; then
              changelog+="${sections[$key]}\n${grouped[$key]}\n"
            fi
          done
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📤 Create GitHub Release
        if: steps.check_commits.outputs.proceed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: Release ${{ steps.version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ inputs.prerelease != '' }}
          target_commitish: ${{ inputs.branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧾 Final Summary
        if: steps.check_commits.outputs.proceed == 'true'
        run: |
          new_version="${{ steps.version.outputs.new_version }}"
          repo="${{ github.repository }}"
          release_url="https://github.com/${repo}/releases/tag/${new_version}"
      
          echo "::notice ::📦 Release Summary"
          echo "::notice ::🔖 Tag: $new_version"
          
          if [[ "${{ inputs.prerelease }}" != "" && "${{ inputs.prerelease }}" != "none" ]]; then
            echo "::notice ::🚧 Pre-release: ${{ inputs.prerelease }}"
          else
            echo "::notice ::✅ Production Release"
          fi
      
          echo "::notice ::🔗 URL: $release_url"
          echo "::notice ::🎉 Release successfully created!"


