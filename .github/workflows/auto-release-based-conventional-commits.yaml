name: 🚀 Auto Release Based on Conventional Commits

run-name: >-
  ${{ 
    format(
      '`{0}` Release ({1}{2})', 
      github.event.inputs.prerelease && github.event.inputs.prerelease != '' && github.event.inputs.prerelease != 'none' && 'Staging' || 'PRODUCTION', 
      github.event.inputs.tag || 'latest',
      github.event.inputs.prerelease && github.event.inputs.prerelease != '' && github.event.inputs.prerelease != 'none' && format(', Pre-release: {0}', github.event.inputs.prerelease) || ''
    ) 
  }}

on:
  workflow_call:
    inputs:
      tag:
        description: 'Optional tag version (e.g., v1.0.0). Leave empty for the latest tag.'
        required: false
        type: string
      prerelease:
        description: 'Optional prerelease identifier (e.g., beta, rc). Leave empty for stable.'
        required: false
        type: string
      force:
        description: 'Force proceed even if no commits found (default is false).'
        required: false
        type: boolean
        default: false
      branch:
        required: false
        type: string
        default: ${{ github.ref_name }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: echo branch
        run: |
          echo "::notice ::selected branch: ${{ inputs.branch }}"

      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0  # Ensure full history is available

      - name: 🏷️ Get latest tag (if exists)
        id: get_tag
        run: |
          latest_tag=$(git tag --list | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
          echo "latest_tag=${latest_tag:-0.0.0}" >> $GITHUB_OUTPUT
          echo "::notice ::Latest tag found: $latest_tag"

      - name: 🏷️ Use provided tag or latest tag
        id: select_tag
        run: |
          if [[ -n "${{ inputs.tag }}" ]]; then
            echo "selected_tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
            echo "::notice ::Using provided tag: ${{ inputs.tag }}"
          else
            echo "selected_tag=${{ steps.get_tag.outputs.latest_tag }}" >> $GITHUB_OUTPUT
            echo "::notice ::Using latest tag: ${{ steps.get_tag.outputs.latest_tag }}"
          fi

      - name: 📦 Get commits since selected tag
        id: get_commits
        run: |
          if [[ "${{ steps.select_tag.outputs.selected_tag }}" != "0.0.0" ]]; then
            commits=$(git log "${{ steps.select_tag.outputs.selected_tag }}"..HEAD --pretty=format:"%s|%b")
          else
            commits=$(git log HEAD --pretty=format:"%s|%b")
          fi
          
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$commits" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "::notice ::Commits fetched: $commits"

      - name: 🚨 Check if commits found or force proceed
        id: check_commits
        run: |
          if [[ -z "${{ steps.get_commits.outputs.commits }}" ]]; then
            if [[ "${{ inputs.force }}" != "true" ]]; then
              echo "::warning ::No commits found, skipping release creation."
              echo "proceed=false" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "::notice ::Proceeding with release creation due to force flag."
              echo "proceed=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "::notice ::Commits found, proceeding with release."
            echo "proceed=true" >> $GITHUB_OUTPUT
          fi


      - name: 🔍 Detect version bump and compute new version
        id: version
        if: steps.check_commits.outputs.proceed == 'true'
        run: |
          # Assuming you have logic for version bumping here...
          new_version="1.0.0"  # Example, replace with actual version bump logic
          echo "::notice ::New version computed: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: 📤 Create GitHub Release
        if: steps.check_commits.outputs.proceed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: Release ${{ steps.version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ inputs.prerelease != '' }}
          target_commitish: ${{ inputs.branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧾 Final Summary
        if: steps.check_commits.outputs.proceed == 'true'
        run: |
          new_version="${{ steps.version.outputs.new_version }}"
          repo="${{ github.repository }}"
          release_url="https://github.com/${repo}/releases/tag/${new_version}"
      
          echo "::notice ::📦 Release Summary"
          echo "::notice ::🔖 Tag: $new_version"
          
          if [[ "${{ inputs.prerelease }}" != "" && "${{ inputs.prerelease }}" != "none" ]]; then
            echo "::notice ::🚧 Pre-release: ${{ inputs.prerelease }}"
          else
            echo "::notice ::✅ Production Release"
          fi
      
          echo "::notice ::🔗 URL: $release_url"
          echo "::notice ::🎉 Release successfully created!"


