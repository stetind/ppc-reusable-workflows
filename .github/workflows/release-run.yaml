# =============================================================================
# üì¶ Execute Release Process
#
# Description:
#   Workflow that triggers the release execution process when release
#   preparation is complete and changes are pushed to the release branch.
#
# Features:
#   ‚Ä¢ Automatic trigger on release branch updates
#   ‚Ä¢ Configurable execution environment
#   ‚Ä¢ Release completion handling
#
# Trigger: push (branch: releases)
# Dependencies: reusable-release-execution.yaml
# =============================================================================

name: üì¶ Run Release

on:
  push:
    branches:
      - releases

jobs:
  metadata:
    name: Read Metadata & Trigger Reusable Release Workflow
    uses: stetind/ppc-reusable-workflows/.github/workflows/release-checkout.yaml@releases
    with:
      runner: ${{ vars.DEFAULT_RUNNER }}

  merge_release_tag_name:
    runs-on: ${{ vars.DEFAULT_RUNNER }}
    needs: [ metadata ]
    container: 'ubuntu:latest'
    outputs:
      tag: ${{ steps.release_tag.outputs.tag }}
    steps:
      - name: Concat release name
        id: release_tag
        shell: bash
        run: |
          RELEASE_TAG="${{ needs.metadata.outputs.new_tag }}"
          PRERELEASE="${{ needs.metadata.outputs.prerelease }}"
            if [[ $PRERELEASE != "" && $PRERELEASE != "none" ]]; then
              RELEASE_TAG+="-"$PRERELEASE
            fi
            echo "tag=v$RELEASE_TAG" >> "$GITHUB_OUTPUT"
            echo "::notice ::Release Tag v$RELEASE_TAG"

  release:
    name: Create Release
    needs: [metadata, merge_release_tag_name]
    uses: stetind/ppc-reusable-workflows/.github/workflows/release-conventional.yaml@releases
    secrets: inherit
    with:
      tag: ${{ needs.merge_release_tag_name.outputs.tag }}
      prerelease: ${{ needs.metadata.outputs.prerelease || '' }}
      release_note_file: '.release_notes.md'
      runner: ${{ vars.DEFAULT_RUNNER }}

  pull_request:
    needs: [ release, metadata, merge_release_tag_name ]
    name: üßπ Create PR from `${{ needs.metadata.outputs.source_branch }}` to `${{ github.event.repository.default_branch }} `
    if: ${{ needs.metadata.outputs.source_branch !=  github.event.repository.default_branch }}
    uses: stetind/ppc-reusable-workflows/.github/workflows/release-cleanup.yaml@releases
    secrets: inherit
    with:
      runner: ${{ vars.DEFAULT_RUNNER }}
      source: ${{ needs.metadata.outputs.source_branch }}
      target: ${{ github.event.repository.default_branch }}
      title: Release ${{ needs.merge_release_tag_name.outputs.tag }}
      merge_option: ${{ needs.metadata.outputs.merge_option }}

  clean_release:
    name: üßπ Clean Temporary branch
    needs: [ release, metadata ]
    runs-on: ${{ vars.DEFAULT_RUNNER }}
    container: 'node:22.14'
    steps:
      - name: üóëÔ∏è Delete `releases` Branch
        uses: stetind/ppc-github-composite-actions/.github/actions/delete-bracnh@v1.0.2
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          branch: releases