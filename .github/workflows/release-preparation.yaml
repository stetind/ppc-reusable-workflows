# =============================================================================
# 🚧 Release Preparation Workflow
#
# Description:
#   A reusable workflow that prepares repository for a new release by handling
#   versioning, file updates, and metadata creation.
#
# Key Features:
#   • Semantic version computation from commit history
#   • Automated version placeholder updates
#   • Release metadata generation
#   • Temporary branch management
#
# Required Permissions:
#   • WORKFLOW_TOKEN: Repository write access
#   • Git: Full history access (fetch-depth: 0)
#
# Inputs:
#   • tag: Release version override (optional)
#   • prerelease: Pre-release identifier (optional)
#   • merge_option: Branch handling strategy
#   • runner: CI runner selection
#   • job_container: Container configuration
#   • temp_branch: Temporary branch name
#
# Outputs:
#   • Metadata file (.release-meta.json)
#   • Updated workflow files with new version
#
# Usage:
#   Called by prepare-new-release.yaml
# =============================================================================


name: 🚧 Release Preparation Workflow
run-name: 🚧 Release Preparation Workflow

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Optional tag version (e.g., v1.0.0). Leave empty for the latest tag.'
        required: false
        type: string
      prerelease:
        description: 'Optional prerelease identifier (e.g., beta, rc). Leave empty for stable.'
        required: false
        type: string
      merge_option:
        description: 'Merge and cleanup option'
        required: false
        type: choice
        default: 'merge and delete'
        options:
          - 'merge and delete'
          - 'merge'
          - 'none'
      runner:
        description: 'Choose the runner'
        required: false
        default: 'ubuntu-latest'
        type: choice
        options:
          - 'self-hosted'
          - 'ubuntu-latest'
      job_container:
        description: 'Select the docker container for the action'
        required: false
        default: 'ubuntu:latest'
        type: choice
        options:
          - 'node:22.14'
          - 'ubuntu:latest'
      temp_branch:
        description: 'Name of the temporary branch for staging release changes. Must match branch used in run-release workflow'
        required: false
        default: 'releases'
        type: string
  workflow_call:
    inputs:
      tag:
        description: 'Version tag to use for the release (e.g., v1.0.0). If not specified, will use the latest tag'
        required: false
        type: string
      prerelease:
        description: 'Identifier for pre-release versions (e.g., beta, rc). Leave empty for stable releases'
        required: false
        type: string
      merge_option:
        description: 'Controls how changes are merged after release preparation:
          - merge and delete: merges changes and removes temporary branch
          - merge: only merges changes
          - none: keeps changes in temporary branch'
        required: false
        type: string
        default: 'merge and delete'
      runner:
        description: 'GitHub runner to execute the workflow (e.g., ubuntu-latest, self-hosted)'
        required: false
        default: 'ubuntu-latest'
        type: string
      job_container:
        description: 'Docker container image to run the job (e.g., node:22.14)'
        required: false
        default: 'ubuntu:latest'
        type: string
      temp_branch:
        description: 'Name of the temporary branch for staging release changes. Must match branch used in run-release workflow'
        required: false
        default: 'releases'
        type: string

jobs:
  prepare:
    name: Prepare & Push
    runs-on: 'ubuntu-latest'

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          fetch-depth: 0

      - name: 🏷️ Select tag
        id: latest_tag
        if: ${{ inputs.tag == '' }}
        uses: stetind/ppc-github-composite-actions/.github/actions/get-latest-tag@v1.0.1
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}

      - name: 📦 Get commits since selected tag
        id: get_commits
        uses: stetind/ppc-github-composite-actions/.github/actions/get-commits-since-tag@v1.0.1
        with:
          tag: ${{ inputs.tag || steps.latest_tag.outputs.latest_tag }}

      - name: 🔍 Detect version bump and compute new version
        id: detect_version
        if: ${{ steps.get_commits.outputs.commits != '' }}
        uses: stetind/ppc-github-composite-actions/.github/actions/detect-version-bump@v1.0.1
        with:
          commits: ${{ steps.get_commits.outputs.commits }}
          tag: ${{ inputs.tag || steps.latest_tag.outputs.latest_tag }}

      - name: 🧪 Generate changelog
        id: changelog
        if: ${{ steps.get_commits.outputs.commits != '' }}
        uses: stetind/ppc-github-composite-actions/.github/actions/generate-changelog@v1.0.1
        with:
          commits: ${{ steps.get_commits.outputs.commits }}
          previous_tag: ${{ inputs.tag || steps.latest_tag.outputs.latest_tag }}
          new_tag: ${{ steps.detect_version.outputs.new_version }}
          repository: ${{ github.repository }}

      - name: Replace __VERSION__ placeholders
        if: ${{ steps.get_commits.outputs.commits != '' }}
        run: |
          new_version="${{ steps.detect_version.outputs.new_version }}"
          new_version=v"${new_version#v}"
          current_file="workflows/release-preparation.yaml"
          echo "Replacing version with $new_version"
          find .github/ -type f -name "*.yaml" ! -name "$current_file" \
            -exec sed -i "s|@__VERSION__|@$new_version|g" {} +

      - name: 💾 Write release metadata
        if: ${{ steps.get_commits.outputs.commits != '' }}
        run: |
          
          # Write commits to separate file
          echo "${{ steps.get_commits.outputs.commits }}" > .commits.txt
          
          # Write release notes to markdown file
          echo '${{ steps.changelog.outputs.changelog }}' > .release_notes.md

          # Create JSON with basic metadata
          cat <<EOF > .release-meta.json
          {
            "previous_tag": "${{ inputs.tag || steps.latest_tag.outputs.latest_tag }}",
            "new_tag": "${{ steps.detect_version.outputs.new_version }}",
            "prerelease": "${{ github.event.inputs.prerelease || '' }}",
            "merge_option": "${{ github.event.inputs.merge_option || 'none' }}",
            "source_branch": "${{ github.ref_name }}"
          }
          EOF

      - name: Commit & Push to ${{ inputs.temp_branch }}
        if: ${{ steps.get_commits.outputs.commits != '' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git checkout -B ${{ inputs.temp_branch }}
          git add .github/workflows/*.yaml
          git add .github/*.yaml
          git add .release-meta.json
          git add .commits.txt
          git add .release_notes.md
          git add README.md
          git commit -m "Prepare release for version ${{ steps.detect_version.outputs.new_version }}"
          git push origin ${{ inputs.temp_branch }} --force