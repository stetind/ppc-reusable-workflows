# =============================================================================
# 🚀 Auto Release Based on Conventional Commits
#
# This reusable workflow creates GitHub releases automatically:
# - Analyzes conventional commits to determine version bump
# - Generates changelog from commit history
# - Creates GitHub release (stable or prerelease)
#
# Inputs:
#   - tag: Optional fixed version (skips bump logic)
#   - new_tag: Optional specific version to use
#   - prerelease: Optional prerelease identifier (beta/rc)
#   - branch: Target branch (default: current ref)
#   - draft: Create as draft release (default: false)
#   - runner: GitHub runner to use
#   - job_container: Docker container image
#
# Outputs:
#   - tag: The version name
#   - prerelease: Whether this is a prerelease
#   - prerelease_suffix: The prerelease suffix
#   - has_changes: Whether there are changes to release
#
# Trigger: workflow_call
# =============================================================================

name: 🚀 Auto Release Based on Conventional Commits
run-name: >-
  ${{ 
    format(
      '`{0}` Release ({1}{2})', 
      github.event.inputs.prerelease && github.event.inputs.prerelease != '' && github.event.inputs.prerelease != 'none' && 'Staging' || 'PRODUCTION', 
      github.event.inputs.tag || 'latest',
      github.event.inputs.prerelease && github.event.inputs.prerelease != '' && github.event.inputs.prerelease != 'none' && format(', Pre-release: {0}', github.event.inputs.prerelease) || ''
    ) 
  }}

on:
  workflow_call:
    outputs:
      tag:
        description: "The version name"
        value: ${{ jobs.release.outputs.new_version }}
      prerelease:
        description: "Describe if the version is prerelease or not"
        value: ${{ jobs.release.outputs.prerelease }}
      prerelease_suffix:
        description: "The prerelease suffix"
        value: ${{ jobs.release.outputs.prerelease_suffix }}
      has_changes:
        description: "Describe if the release has changes or not"
        value: ${{ jobs.release.outputs.has_changes }}

    inputs:
      tag:
        description: 'Optional tag version (e.g., v1.0.0). Leave empty for the latest tag.'
        required: false
        type: string
      new_tag:
        description: 'Optional tag version (e.g., v1.0.0).'
        required: false
        type: string
        default: ''
      prerelease:
        description: 'Optional prerelease identifier (e.g., beta, rc). Leave empty for stable.'
        required: false
        type: string
      branch:
        required: false
        type: string
        default: ${{ github.ref_name }}
      release_notes:
        required: true
        type: string
        default: ''
      release_note_file:
        required: true
        type: string
        default: ''
      draft:
        required: false
        type: boolean
        default: false
      runner:
        description: 'Choose the runner'
        required: false
        default: 'ubuntu-latest'
        type: string
      job_container:
        description: 'Select the docker container for the action'
        required: false
        default: 'node:22.14'
        type: string

jobs:
  release:
    name: Create Release
    runs-on: ${{ inputs.runner }}
    container: ${{ inputs.job_container }}
    outputs:
      tag: ${{ steps.changelog.outputs.new_tag }}
      prerelease: ${{ inputs.prerelease != '' && inputs.prerelease != 'none' }}
      prerelease_suffix: ${{ inputs.prerelease }}
      has_changes: ${{ steps.changelog.outputs.has_changes }}

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0

      - name: 📦 Check if release exists
        id: check_release_exists
        run: |
          release_exists=$(gh release view ${{ inputs.tag }} --json name --jq ".name" || echo "not_found")
          if [[ "$release_exists" != "not_found" ]]; then
            echo "::error ::Release with tag ${{ inputs.tag }} already exists. Exiting."
            exit 1
          else
            echo "::notice ::No existing release found, proceeding with release creation."
          fi

      - name: 📤 Create GitHub Release
        if: inputs.release_notes != '' && steps.release_notes.outcome == 'success'
        uses: stetind/ppc-github-composite-actions/.github/actions/create-github-release@v1.0.0
        with:
          version: ${{ inputs.tag }}
          changelog: ${{ inputs.release_notes }}
          changelog_file: ${{ inputs.release_note_file }}
          prerelease: ${{ inputs.prerelease != '' && inputs.prerelease != 'none' }}
          target_branch: ${{ inputs.branch }}
          draft: ${{ inputs.draft }}

      - name: 📟 Final Summary
        if: success()
        run: |
          new_version="${{ steps.detect_version.outputs.new_version }}"
          repo="${{ github.repository }}"
          release_url="https://github.com/${repo}/releases/tag/${new_version}"
          
          echo "::notice ::📆 Release Summary"
          echo "::notice ::🔖 Tag: $new_version"
          if [[ "${{ inputs.prerelease }}" != "" && "${{ inputs.prerelease }}" != "none" ]]; then
            echo "::notice ::🚧 Pre-release: ${{ inputs.prerelease }}"
          else
            echo "::notice ::✅ Production Release"
          fi
          echo "::notice ::🔗 URL: $release_url"
          echo "::notice ::🎉 Release successfully created!"
          
          echo "::notice :: BASE64 ${{ steps.release_notes.outputs.text }}"