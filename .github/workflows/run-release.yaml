# =============================================================================
# 🚀 Run Release from Branch
#
# This workflow automates the release process when the `releases` branch updates:
# - Reads metadata from .release-meta.json
# - Triggers the reusable release workflow
# - Cleans up after successful release
#
# Required Files:
#   - .release-meta.json containing:
#     - previous_tag: Tag to compare from
#     - new_tag: Tag to be released
#     - prerelease: Optional prerelease identifier
#
# Dependencies:
#   - stetind/ppc-reusable-workflows/.github/workflows/auto-release-based-conventional-commits.yaml
#
# Trigger: push (branch: releases)
# =============================================================================

name: 🚀 Run Release from Branch

on:
  push:
    branches:
      - releases

jobs:
  read_metadata_and_delegate:
    name: Read Metadata & Trigger Reusable Release Workflow
    runs-on: ${{ vars.DEFAULT_RUNNER || 'ubuntu-latest' }}
    container: ${{ vars.DEFAULT_NODE_CONTAINER || 'node:22.14' }}

    outputs:
      previous_tag: ${{ steps.read_meta.outputs.previous_tag }}
      new_tag: ${{ steps.read_meta.outputs.new_tag }}
      prerelease: ${{ steps.read_meta.outputs.prerelease }}
      merge_option: ${{ steps.read_meta.outputs.merge_option }}
      source_branch: ${{ steps.read_meta.outputs.source_branch }}

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Install Jq
        uses: stetind/ppc-github-composite-actions/.github/actions/check-install-jq@1.0.0

      - name: 🔍 Read .release-meta.json
        id: read_meta
        run: |
          if [ ! -f .release-meta.json ]; then
            echo "::error ::.release-meta.json file not found!"
            exit 1
          fi

          PREVIOUS_TAG=$(jq -r '.previous_tag' .release-meta.json)
          NEW_TAG=$(jq -r '.new_tag' .release-meta.json)
          PRERELEASE=$(jq -r '.prerelease' .release-meta.json)
          MERGE_OPTION=$(jq -r '.merge_option' .release-meta.json)
          SOURCE_BRANCH=$(jq -r '.source_branch' .release-meta.json)

          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT
          echo "merge_option=$MERGE_OPTION" >> $GITHUB_OUTPUT
          echo "source_branch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT

      - name: 📟 Summary
        if: always()
        run: |
          echo "::notice ::📆 Meta Data"
          echo "::notice ::🚧 Previous Tag: ${{ steps.read_meta.outputs.previous_tag }}"
          echo "::notice ::🚧 New Tag: ${{ steps.read_meta.outputs.new_tag }}"
          echo "::notice ::🚧 Pre-release: ${{ steps.read_meta.outputs.prerelease }}"
          echo "::notice ::🚧 Merge option: ${{ steps.read_meta.outputs.merge_option }}"
          echo "::notice ::🚧 Source Branch: ${{ steps.read_meta.outputs.source_branch }}"

  release:
    name: Final Release
    needs: read_metadata_and_delegate
    uses: stetind/ppc-reusable-workflows/.github/workflows/auto-release-based-conventional-commits.yaml@releases
    secrets: inherit
    with:
      tag: ${{ needs.read_metadata_and_delegate.outputs.previous_tag }}
      prerelease: ${{ needs.read_metadata_and_delegate.outputs.prerelease }}
      runner: ${{ vars.DEFAULT_RUNNER || 'ubuntu-latest' }}
      job_container: ${{ vars.DEFAULT_NODE_CONTAINER || 'node:22.14' }}

  clean:
    name: 🧹 Merge and clean branches
    needs: release
    runs-on: ${{ vars.DEFAULT_RUNNER || 'ubuntu-latest' }}
    container: ${{ vars.DEFAULT_NODE_CONTAINER || 'node:22.14' }}

    steps:
      - name: 📟 Summary
        run: |
          echo "::notice ::📆 Meta Data"
          echo "::notice ::🚧 Previous Tag: ${{ needs.read_metadata_and_delegate.outputs.previous_tag }}"
          echo "::notice ::🚧 New Tag: ${{ needs.read_metadata_and_delegate.outputs.new_tag }}"
          echo "::notice ::🚧 Pre-release: ${{ needs.read_metadata_and_delegate.outputs.prerelease }}"
          echo "::notice ::🚧 Merge option: ${{ needs.read_metadata_and_delegate.outputs.merge_option }}"
          echo "::notice ::🚧 Source Branch: ${{ needs.read_metadata_and_delegate.outputs.source_branch }}"

      - name: 🔄 Merge anc Delete
        id: create_pr
        uses: stetind/ppc-github-composite-actions/.github/actions/create-pr-and-merge@1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: Release ${{ needs.read_metadata_and_delegate.outputs.new_tag }}
          merge_option: ${{ needs.read_metadata_and_delegate.outputs.merge_option }}
          source: ${{ needs.read_metadata_and_delegate.outputs.source_branch }}

      - name: 🗑️ Delete `releases` Branch
        uses: stetind/ppc-github-composite-actions/.github/actions/delete-bracnh@1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: releases

      - name: 📟 Summary
        if: always()
        run: |
          echo "::notice::📟 Cleanup Summary"
          echo "::notice::Branch 'releases' has been deleted"

          if [ "${{ steps.create_pr.outputs.pr_url }}" != "" ]; then
            echo "::notice::✅ PR created and processed: ${{ steps.create_pr.outputs.pr_url }}"
          fi

          if [ "${{ needs.read_metadata_and_delegate.outputs.merge_option }}" == "merge and delete" ]; then
            echo "::notice::🗑️ Source branch cleanup was attempted"
          fi
