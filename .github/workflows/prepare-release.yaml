name: üöß Prepare Reusable Release
run-name: üöß Prepare Reusable Release
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Optional tag version (e.g., v1.0.0). Leave empty for the latest tag.'
        required: false
        type: string
      prerelease:
        description: 'Optional prerelease identifier (e.g., beta, rc). Leave empty for stable.'
        required: false
        type: string
env:
  TEMP_BRANCH: releases

jobs:
  prepare:
    name: Prepare & Push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          fetch-depth: 0

      - name: üè∑Ô∏è Get latest tag (if exists)
        id: get_tag
        run: |
          latest_tag=$(git tag --list | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
          echo "latest_tag=${latest_tag:-0.0.0}" >> $GITHUB_OUTPUT
          echo "::notice ::Latest tag found: $latest_tag"

      - name: üè∑Ô∏è Use provided tag or latest tag
        id: select_tag
        run: |
          if [[ -n "${{ inputs.tag }}" ]]; then
            echo "selected_tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
            echo "::notice ::Using provided tag: ${{ inputs.tag }}"
          else
            echo "selected_tag=${{ steps.get_tag.outputs.latest_tag }}" >> $GITHUB_OUTPUT
            echo "::notice ::Using latest tag: ${{ steps.get_tag.outputs.latest_tag }}"
          fi

      - name: üì¶ Get commits since selected tag
        id: get_commits
        run: |
          if [[ "${{ steps.select_tag.outputs.selected_tag }}" != "0.0.0" ]]; then
            commits=$(git log "${{ steps.select_tag.outputs.selected_tag }}"..HEAD --pretty=format:"%s|%b")
          else
            commits=$(git log HEAD --pretty=format:"%s|%b")
          fi

          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$commits" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "::notice ::Commits fetched: $commits"

      - name: üö® Check if commits found or force proceed
        id: check_commits
        run: |
          if [[ -z "${{ steps.get_commits.outputs.commits }}" ]]; then
            if [[ "${{ inputs.force }}" != "true" ]]; then
              echo "::warning ::No commits found, skipping release creation."
              echo "proceed=false" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "::notice ::Proceeding with release creation due to force flag."
              echo "proceed=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "::notice ::Commits found, proceeding with release."
            echo "proceed=true" >> $GITHUB_OUTPUT
          fi


      - name: üîç Detect version bump and compute new version
        id: version
        if: steps.check_commits.outputs.proceed == 'true'
        run: |
          current_version="${{ steps.select_tag.outputs.selected_tag }}"
          current_version="${current_version#v}"

          if [[ -z "$current_version" ]]; then
            current_version="0.0.0"
          fi

          IFS='.' read -r major minor patch <<< "$current_version"

          if [[ "$current_version" != "0.0.0" ]]; then
            commits=$(git log "v${current_version}"..HEAD --pretty=format:"%s%n%b")
          else
            commits=$(git log HEAD --pretty=format:"%s%n%b")
          fi

          bump_major=0
          bump_minor=0
          bump_patch=0

          while IFS= read -r line; do
            # Detect conventional commits with optional scope and optional breaking change (!)
            if [[ "$line" =~ ^(feat|fix|chore|refactor|perf|style|test|build|ci)(\([a-zA-Z0-9_-]+\))?!?: ]]; then
              type=$(echo "$line" | sed -E 's/^([a-z]+).*/\1/')
              if [[ "$line" =~ "!" ]]; then
                bump_major=1
              elif [[ "$type" == "feat" ]]; then
                bump_minor=1
              elif [[ "$type" == "fix" ]]; then
                bump_patch=1
              fi
            elif [[ "$line" =~ BREAKING[[:space:]]CHANGE ]]; then
              bump_major=1
            fi
          done <<< "$commits"

          if [[ "$bump_major" == 1 ]]; then
            new_version="$((major + 1)).0.0"
          elif [[ "$bump_minor" == 1 ]]; then
            new_version="$major.$((minor + 1)).0"
          elif [[ "$bump_patch" == 1 ]]; then
            new_version="$major.$minor.$((patch + 1))"
          else
            echo "::warning ::No version bump rule matched. Keeping current version: $current_version"
            new_version="$current_version"
          fi

          echo "::notice ::New version computed: v$new_version"
          echo "new_version=v$new_version" >> $GITHUB_OUTPUT

      - name: Replace __VERSION__ placeholders
        run: |
          echo "Replacing version with ${{ steps.version.outputs.new_version }}"
          find .github/workflows -type f -name "*.yaml" \
            -exec sed -i "s|__VERSION__|${{ steps.version.outputs.new_version }}|g" {} +

      - name: üíæ Write release metadata
        run: |
          cat <<EOF > .release-meta.json
          {
            "tag": "${{ steps.version.outputs.new_version }}",
            "prerelease": "${{ github.event.inputs.prerelease || '' }}"
          }
          EOF

      - name: Commit & Push to ${{ env.TEMP_BRANCH }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git checkout -B ${{ env.TEMP_BRANCH }}
          git add .github/workflows/*.yaml
          git add .github/*.yaml
          git add .release-meta.json
          git add README.md
          git commit -m "Prepare release for version ${{ steps.version.outputs.new_version }}"
          git push origin ${{ env.TEMP_BRANCH }} --force
