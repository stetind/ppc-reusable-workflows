# =============================================================================
# üöß Release Preparation Workflow
#
# Description:
#   A reusable workflow that prepares repository for a new release by handling
#   versioning, file updates, and metadata creation.
#
# Key Features:
#   ‚Ä¢ Semantic version computation from commit history
#   ‚Ä¢ Automated version placeholder updates
#   ‚Ä¢ Release metadata generation
#   ‚Ä¢ Temporary branch management
#
# Required Permissions:
#   ‚Ä¢ WORKFLOW_TOKEN: Repository write access
#   ‚Ä¢ Git: Full history access (fetch-depth: 0)
#
# Inputs:
#   ‚Ä¢ tag: Release version override (optional)
#   ‚Ä¢ prerelease: Pre-release identifier (optional)
#   ‚Ä¢ merge_option: Branch handling strategy
#   ‚Ä¢ runner: CI runner selection
#   ‚Ä¢ job_container: Container configuration
#   ‚Ä¢ temp_branch: Temporary branch name
#
# Outputs:
#   ‚Ä¢ Metadata file (.release-meta.json)
#   ‚Ä¢ Updated workflow files with new version
#
# Usage:
#   Called by prepare-new-release.yaml
# =============================================================================


name: üöß Prepare Reusable Release
run-name: üöß Prepare Reusable Release

on:
  workflow_call:
    inputs:
      tag:
        description: 'Version tag to use for the release (e.g., v1.0.0). If not specified, will use the latest tag'
        required: false
        type: string
      prerelease:
        description: 'Identifier for pre-release versions (e.g., beta, rc). Leave empty for stable releases'
        required: false
        type: string
      merge_option:
        description: 'Controls how changes are merged after release preparation:
          - merge and delete: merges changes and removes temporary branch
          - merge: only merges changes
          - none: keeps changes in temporary branch'
        required: false
        type: string
        default: 'merge and delete'
      runner:
        description: 'GitHub runner to execute the workflow (e.g., ubuntu-latest, self-hosted)'
        required: false
        default: ${{ vars.DEFAULT_RUNNER }}
        type: string
      job_container:
        description: 'Docker container image to run the job (e.g., node:22.14)'
        required: false
        default: ${{ vars.DEFAULT_NODE_CONTAINER }}
        type: string
      temp_branch:
        description: 'Name of the temporary branch for staging release changes. Must match branch used in run-release workflow'
        required: false
        default: 'releases'
        type: string

jobs:
  prepare:
    name: Prepare & Push
    runs-on: ${{ inputs.runner }}
    container: ${{ inputs.job_container }}

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          fetch-depth: 0

      - name: üè∑Ô∏è Select tag
        id: select_tag
        uses: stetind/ppc-github-composite-actions/.github/actions/get-latest-tag@1.0.0
        with:
          tag: ${{ inputs.tag }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üß™ Generate changelog
        id: changelog
        uses: stetind/ppc-github-composite-actions/.github/actions/generate-changelog-by-tag@1.0.0
        with:
          previous_tag: ${{ steps.select_tag.outputs.selected_tag }}
          repository: ${{ github.repository }}
          new_tag: ''

      - name: Replace __VERSION__ placeholders
        if: steps.changelog.outputs.has_changes != ''
        run: |
          echo "Replacing version with ${{ steps.changelog.outputs.new_tag }}"
          find .github/workflows -type f -name "*.yaml" \
            -exec sed -i "s|__VERSION__|${{ steps.changelog.outputs.new_tag }}|g" {} +

      - name: üíæ Write release metadata
        if: steps.changelog.outputs.has_changes != ''
        run: |
          cat <<EOF > .release-meta.json
          {
            "previous_tag": "${{ steps.select_tag.outputs.selected_tag }}",
            "new_tag": "${{ steps.changelog.outputs.new_tag }}",
            "prerelease": "${{ github.event.inputs.prerelease || '' }}",
            "merge_option": "${{ github.event.inputs.merge_option || 'none' }}",
            "source_branch": "${{ github.ref_name }}"
          }
          EOF

      - name: Commit & Push to ${{ env.TEMP_BRANCH }}
        if: steps.changelog.outputs.has_changes != ''
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git checkout -B ${{ inputs.temp_branch }}
          git add .github/workflows/*.yaml
          git add .github/*.yaml
          git add .release-meta.json
          git add README.md
          git commit -m "Prepare release for version ${{ steps.changelog.outputs.new_tag }}"
          git push origin ${{ inputs.temp_branch }} --force